# I am not interested in the first 9 columns. Only keeping columns which have data about the destination countries
destination_data_ven_2019 <- destination_data_ven_2019[c(10:241)]
# Making the table vertical- gather
destination_data_ven_2019 <- tidyr::gather(destination_data_ven_2019, key = "country", value = "value")
destination_data_ven_2019$value <- destination_data_ven_2019$value %>%
as.numeric()
world_ven <- merge(world, destination_data_ven_2019, by.x = "sovereignt", by.y = "country", all.x = TRUE)
View(world_ven)
world_ven_ven <- world_ven %>%
filter(sovereignt == "Venezuela")
content <- sprintf("<strong>%s</strong><br/>%g",
world_ven@data$sovereignt,
world_ven@data$value) %>% lapply(htmltools::HTML)
content <- sprintf("<strong>%s</strong><br/>%g",
world_ven$sovereignt,
world_ven$value) %>% lapply(htmltools::HTML)
group <- c()
lng <- c()
lat <- c()
groupval = 1
for(i in 1:nrow(world_ven)){
# If there is a connection between destination and origin country
if(!is.na(world_ven$value[i])){
print(groupval)
# Enter origin country first
group <- c(group, groupval)
lat <- c(lat, world_ven_ven$Latitude)
lng <- c(lng, world_ven_ven$Longitude)
# Enter destination country for same groupvalue
group <- c(group, groupval)
lat <- c(lat, world_ven$Latitude[i])
lng <- c(lng, world_ven$Longitude[i])
# Increment group val
groupval = groupval + 1
}
}
df <- data.frame(group=group, lng=lng, lat=lat)
df
pal <- colorNumeric("Blues", df$group)
leaflet::leaflet() %>%
setView(-66.1818412311, 7.12422421273, zoom = 4) %>%
addTiles(options = providerTileOptions(minZoom = 3, maxZoom = 5)) %>%
addCircles(data = world_ven,
lat = world_ven$Latitude,
lng = world_ven$Longitude,
radius = world_ven$value,
fillColor = world_ven$value,
opacity = 0.8, fillOpacity = 0.7,
popup = content, label = content, labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addPolylines(data = df,
lng = df$lng,
lat = df$lat,
group = df$group,
color = pal(df$group),
opacity = 0.3,
weight = 1)
leaflet::leaflet() %>%
setView(-66.1818412311, 7.12422421273, zoom = 4) %>%
addTiles(options = providerTileOptions(minZoom = 3, maxZoom = 5)) %>%
addCircles(data = world_ven,
lat = world_ven$Latitude,
lng = world_ven$Longitude,
radius = world_ven$value,
fillColor = world_ven$value,
opacity = 0.8, fillOpacity = 0.7,
popup = content, label = content, labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addPolylines(data = df,
lng = df$lng,
lat = df$lat,
group = df$group,
color = pal(df$group),
opacity = 0.1,
weight = 1)
leaflet::leaflet() %>%
setView(-66.1818412311, 7.12422421273, zoom = 2) %>%
addTiles(options = providerTileOptions(minZoom = 1, maxZoom = 5)) %>%
addCircles(data = world_ven,
lat = world_ven$Latitude,
lng = world_ven$Longitude,
radius = world_ven$value,
fillColor = world_ven$value,
opacity = 0.8, fillOpacity = 0.7,
popup = content, label = content, labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addPolylines(data = df,
lng = df$lng,
lat = df$lat,
group = df$group,
color = pal(df$group),
opacity = 0.1,
weight = 1)
leaflet::leaflet() %>%
setView(-66.1818412311, 7.12422421273, zoom = 2) %>%
addTiles(options = providerTileOptions(minZoom = 1, maxZoom = 5)) %>%
addCircles(data = world_ven,
lat = world_ven$Latitude,
lng = world_ven$Longitude,
radius = world_ven$value,
fillColor = world_ven$value,
opacity = 0.8, fillOpacity = 0.7,
popup = content, label = content, labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addPolylines(data = df,
lng = df$lng,
lat = df$lat,
group = df$group,
color = pal(df$group),
opacity = 0.1,
weight = 1,
popup = content)
leaflet::leaflet() %>%
setView(-66.1818412311, 7.12422421273, zoom = 2) %>%
addTiles(options = providerTileOptions(minZoom = 1, maxZoom = 5)) %>%
addCircles(data = world_ven,
lat = world_ven$Latitude,
lng = world_ven$Longitude,
radius = world_ven$value,
fillColor = world_ven$value,
opacity = 0.8, fillOpacity = 0.7,
popup = content, label = content, labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addPolylines(data = df,
lng = df$lng,
lat = df$lat,
group = df$group,
color = pal(df$group),
opacity = 0.1,
weight = 1, label = content)
dim(df)
View(world_ven)
world_ven %>% filter(!is.na(value)) %>% select(sovereignt)
group <- c()
lng <- c()
lat <- c()
groupval = 1
for(i in 1:nrow(world_ven)){
# If there is a connection between destination and origin country
if(!is.na(world_ven$value[i])){
# Enter origin country first
group <- c(group, groupval)
lat <- c(lat, world_ven_ven$Latitude)
lng <- c(lng, world_ven_ven$Longitude)
# Enter destination country for same groupvalue
group <- c(group, groupval)
lat <- c(lat, world_ven$Latitude[i])
lng <- c(lng, world_ven$Longitude[i])
# Increment group val
groupval = groupval + 1
}
}
leaflet::leaflet() %>%
setView(-66.1818412311, 7.12422421273, zoom = 2) %>%
addTiles(options = providerTileOptions(minZoom = 1, maxZoom = 5)) %>%
addCircles(data = world_ven,
lat = world_ven$Latitude,
lng = world_ven$Longitude,
radius = world_ven$value,
fillColor = world_ven$value,
opacity = 0.8, fillOpacity = 0.7,
popup = content, label = content, labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addPolylines(data = df_ven,
lng = df_ven$lng,
lat = df_ven$lat,
group = df_ven$group,
color = pal(df_ven$group),
opacity = 0.1,
weight = 1,
fillOpacity = 0.1)
df_ven <- data.frame(group=group, lng=lng, lat=lat)
leaflet::leaflet() %>%
setView(-66.1818412311, 7.12422421273, zoom = 2) %>%
addTiles(options = providerTileOptions(minZoom = 1, maxZoom = 5)) %>%
addCircles(data = world_ven,
lat = world_ven$Latitude,
lng = world_ven$Longitude,
radius = world_ven$value,
fillColor = world_ven$value,
opacity = 0.8, fillOpacity = 0.7,
popup = content, label = content, labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addPolylines(data = df_ven,
lng = df_ven$lng,
lat = df_ven$lat,
group = df_ven$group,
color = pal(df_ven$group),
opacity = 0.1,
weight = 1,
fillOpacity = 0.1)
style = list("font-weight" = "normal", padding = "3px 8px"),
leaflet::leaflet() %>%
setView(-66.1818412311, 7.12422421273, zoom = 2) %>%
addTiles(options = providerTileOptions(minZoom = 1, maxZoom = 5)) %>%
addCircles(data = world_ven,
lat = world_ven$Latitude,
lng = world_ven$Longitude,
radius = world_ven$value,
fillColor = world_ven$value,
opacity = 0.8, fillOpacity = 0.7,
popup = content, label = content, labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addPolylines(data = df_ven,
lng = df_ven$lng,
lat = df_ven$lat,
group = df_ven$group,
color = pal(df_ven$group),
opacity = 0.1,
weight = 1,
fillOpacity = df_ven$group)
leaflet::leaflet() %>%
setView(-66.1818412311, 7.12422421273, zoom = 2) %>%
addTiles(options = providerTileOptions(minZoom = 1, maxZoom = 5)) %>%
addCircles(data = world_ven,
lat = world_ven$Latitude,
lng = world_ven$Longitude,
radius = world_ven$value,
fillColor = world_ven$value,
opacity = 0.8, fillOpacity = 0.7,
popup = content, label = content, labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addPolylines(data = df_ven,
lng = df_ven$lng,
lat = df_ven$lat,
group = df_ven$group,
color = pal(df_ven$group),
opacity = 0.1,
weight = 1,
fillOpacity = df_ven$group
fillColor = df_ven$group)
leaflet::leaflet() %>%
setView(-66.1818412311, 7.12422421273, zoom = 2) %>%
addTiles(options = providerTileOptions(minZoom = 1, maxZoom = 5)) %>%
addCircles(data = world_ven,
lat = world_ven$Latitude,
lng = world_ven$Longitude,
radius = world_ven$value,
fillColor = world_ven$value,
opacity = 0.8, fillOpacity = 0.7,
popup = content, label = content, labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addPolylines(data = df_ven,
lng = df_ven$lng,
lat = df_ven$lat,
group = df_ven$group,
color = pal(df_ven$group),
opacity = 0.1,
weight = 1,
fillOpacity = df_ven$group
fillColor = pal(df_ven$group))
leaflet::leaflet() %>%
setView(-66.1818412311, 7.12422421273, zoom = 2) %>%
addTiles(options = providerTileOptions(minZoom = 1, maxZoom = 5)) %>%
addCircles(data = world_ven,
lat = world_ven$Latitude,
lng = world_ven$Longitude,
radius = world_ven$value,
fillColor = world_ven$value,
opacity = 0.8, fillOpacity = 0.7,
popup = content, label = content, labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addPolylines(data = df_ven,
lng = df_ven$lng,
lat = df_ven$lat,
group = df_ven$group,
color = pal(df_ven$group),
opacity = 0.1,
weight = 1,
fillOpacity = df_ven$group,
fillColor = pal(df_ven$group))
leaflet::leaflet() %>%
setView(-66.1818412311, 7.12422421273, zoom = 2) %>%
addTiles(options = providerTileOptions(minZoom = 2, maxZoom = 5)) %>%
addCircles(data = world_ven,
lat = world_ven$Latitude,
lng = world_ven$Longitude,
radius = world_ven$value,
fillColor = world_ven$value,
opacity = 0.8, fillOpacity = 0.7,
popup = content, label = content, labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addPolylines(data = df_ven,
lng = df_ven$lng,
lat = df_ven$lat,
group = df_ven$group,
color = pal(df_ven$group),
opacity = 0.1,
weight = 1,
fillOpacity = df_ven$group,
fillColor = pal(df_ven$group))
df_ven
style = list("font-weight" = "normal", padding = "3px 8px"),
leaflet::leaflet() %>%
setView(-66.1818412311, 7.12422421273, zoom = 2) %>%
addTiles(options = providerTileOptions(minZoom = 2, maxZoom = 5)) %>%
addCircles(data = world_ven,
lat = world_ven$Latitude,
lng = world_ven$Longitude,
radius = world_ven$value,
fillColor = world_ven$value,
opacity = 0.8, fillOpacity = 0.7,
popup = content, label = content, labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addPolylines(data = df_ven,
lng = df_ven$lng,
lat = df_ven$lat,
group = df_ven$group,
color = pal(df_ven$group),
opacity = 0.1,
weight = 1,
fillOpacity = df_ven$group,
fillColor = pal(df_ven$group))
# Importing migrant origin and destination numbers for Syria
destination_data <- readxl::read_excel("Data/UN_MigrantStockByOriginAndDestination_2019.xlsx", sheet = 2, skip = 15, col_names = TRUE, trim_ws = TRUE)
# Subsetting origin to Syria
destination_data_syr <- destination_data %>%
dplyr::filter(...3 == "Syrian Arab Republic")
destination_data_syr$Total <- destination_data_syr$Total %>%
as.numeric()
# Subsetting origin to Syria and also 2018. This will be used in the map.
destination_data_syr_2019 <- destination_data_syr %>%
dplyr::filter(...1 == 2019)
# I am not interested in the first 9 columns. Only keeping columns which have data about the destination countries
destination_data_syr_2019 <- destination_data_syr_2019[c(10:241)]
# Making the table vertical- gather
destination_data_syr_2019 <- tidyr::gather(destination_data_syr_2019, key = "country", value = "value")
destination_data_syr_2019$value <- destination_data_syr_2019$value %>%
as.numeric()
# importing the country centroid data
world <- rgdal::readOGR("Data/country_centroids_az8/country_centroids_az8.shp")
# Merging data with shape file
world_syr <- merge(world, destination_data_syr_2019, by.x = "sovereignt", by.y = "country", all.x = TRUE)
View(world_syr)
world_syr_syr <- world_syr %>%
filter(sovereignt == "Syria")
group <- c()
lng <- c()
lat <- c()
groupval = 1
world <- rgdal::readOGR("Data/country_centroids_az8/country_centroids_az8.shp")
world_ven <- merge(world, destination_data_ven_2019, by.x = "sovereignt", by.y = "country", all.x = TRUE)
world_ven_ven <- world_ven %>%
filter(sovereignt == "Venezuela")
content <- sprintf("<strong>%s</strong><br/>%g",
world_ven$sovereignt,
world_ven$value) %>% lapply(htmltools::HTML)
group <- c()
lng <- c()
lat <- c()
groupval = 1
for(i in 1:nrow(world_ven)){
# If there is a connection between destination and origin country
if(!is.na(world_ven$value[i])){
# Enter origin country first
group <- c(group, groupval)
lat <- c(lat, world_ven_ven$Latitude)
lng <- c(lng, world_ven_ven$Longitude)
# Enter destination country for same groupvalue
group <- c(group, groupval)
lat <- c(lat, world_ven$Latitude[i])
lng <- c(lng, world_ven$Longitude[i])
# Increment group val
groupval = groupval + 1
}
}
df_ven <- data.frame(group=group, lng=lng, lat=lat)
pal <- colorNumeric("Blues", df_ven$group)
leaflet::leaflet() %>%
setView(-66.1818412311, 7.12422421273, zoom = 2) %>%
addTiles(options = providerTileOptions(minZoom = 2, maxZoom = 5)) %>%
addCircles(data = world_ven,
lat = world_ven$Latitude,
lng = world_ven$Longitude,
radius = world_ven$value,
fillColor = world_ven$value,
opacity = 0.8, fillOpacity = 0.7,
popup = content, label = content, labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addPolylines(data = df_ven,
lng = df_ven$lng,
lat = df_ven$lat,
group = df_ven$group,
color = pal(df_ven$group),
opacity = 0.1,
weight = 1,
fillOpacity = df_ven$group,
fillColor = pal(df_ven$group)) %>%
addPolylines(data = df_syr,
lng = df_syr$lng,
lat = df_syr$lat,
group = df_syr$group,
color = pal(df_syr$group),
opacity = 0.1,
weight = 1,
fillOpacity = df_syr$group,
fillColor = pal(df_syr$group))
# importing the country centroid data
world <- rgdal::readOGR("Data/country_centroids_az8/country_centroids_az8.shp")
# Merging data with shape file
world_syr <- merge(world, destination_data_syr_2019, by.x = "sovereignt", by.y = "country", all.x = TRUE)
world_syr_syr <- world_syr %>%
filter(sovereignt == "Syria")
group <- c()
lng <- c()
lat <- c()
groupval = 1
for(i in 1:nrow(world_syr)){
# If there is a connection between destination and origin country
if(!is.na(world_syr$value[i])){
# Enter origin country first
group <- c(group, groupval)
lat <- c(lat, world_syr_syr$Latitude)
lng <- c(lng, world_syr_syr$Longitude)
# Enter destination country for same groupvalue
group <- c(group, groupval)
lat <- c(lat, world_syr$Latitude[i])
lng <- c(lng, world_syr$Longitude[i])
# Increment group val
groupval = groupval + 1
}
}
df_syr <- data.frame(group=group, lng=lng, lat=lat)
pal <- colorNumeric("Blues", df_syr$group)
content <- sprintf("<strong>%s</strong><br/>%g",
world_syr$sovereignt,
world_syr$value) %>% lapply(htmltools::HTML)
leaflet::leaflet() %>%
setView(33.510414, 36.278336, zoom = 4) %>%
addTiles(options = providerTileOptions(minZoom = 3, maxZoom = 5)) %>%
addCircles(data = world_syr,
lat = world_syr$Latitude,
lng = world_syr$Longitude,
radius = world_syr$value,
fillColor = world_syr$value,
opacity = 0.8, fillOpacity = 0.7,
popup = content, label = content, labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addPolylines(data = df_syr,
lng = df_syr$lng,
lat = df_syr$lat,
group = df_syr$group,
color = pal(df_syr$group),
opacity = 0.1,
weight = 1,
fillOpacity = df_syr$group,
fillColor = pal(df_syr$group))
# importing the country centroid data
world <- rgdal::readOGR("Data/country_centroids_az8/country_centroids_az8.shp")
# Merging data with shape file
world_syr <- merge(world, destination_data_syr_2019, by.x = "sovereignt", by.y = "country", all.x = TRUE)
# Importing migrant origin and destination numbers for Syria
destination_data <- readxl::read_excel("Data/UN_MigrantStockByOriginAndDestination_2019.xlsx", sheet = 2, skip = 15, col_names = TRUE, trim_ws = TRUE)
# Subsetting origin to Syria
destination_data_syr <- destination_data %>%
dplyr::filter(...3 == "Syrian Arab Republic")
library(dplyr)
# Importing migrant origin and destination numbers for Syria
destination_data <- readxl::read_excel("Data/UN_MigrantStockByOriginAndDestination_2019.xlsx", sheet = 2, skip = 15, col_names = TRUE, trim_ws = TRUE)
# Subsetting origin to Syria
destination_data_syr <- destination_data %>%
dplyr::filter(...3 == "Syrian Arab Republic")
destination_data_syr$Total <- destination_data_syr$Total %>%
as.numeric()
# Subsetting origin to Syria and also 2018. This will be used in the map.
destination_data_syr_2019 <- destination_data_syr %>%
dplyr::filter(...1 == 2019)
# I am not interested in the first 9 columns. Only keeping columns which have data about the destination countries
destination_data_syr_2019 <- destination_data_syr_2019[c(10:241)]
# Making the table vertical- gather
destination_data_syr_2019 <- tidyr::gather(destination_data_syr_2019, key = "country", value = "value")
destination_data_syr_2019$value <- destination_data_syr_2019$value %>%
as.numeric()
# Merging data with shape file
world_syr <- merge(world, destination_data_syr_2019, by.x = "sovereignt", by.y = "country", all.x = TRUE)
world_syr_syr <- world_syr@data %>%
filter(sovereignt == "Syria")
View(world_syr)
world_syr %>%
filter(sovereignt == "Syria") %>% select(Latitude, Longitude)
leaflet::setView()
?leaflet::setView()
