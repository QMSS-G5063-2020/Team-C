as.numeric()
ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date)),
aes(x = factor(date), y = SI.POV.NAHC, fill = factor(SI.POV.NAHC)), stat = "identity") +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1))
+
theme(
legend.position = "none"
)
ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date)),
aes(x = factor(date), y = SI.POV.NAHC, fill = factor(SI.POV.NAHC)), stat = "identity") +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1)) +
theme(
legend.position = "none"
)
p <- ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date)),
aes(x = factor(date), y = SI.POV.NAHC, fill = factor(SI.POV.NAHC)), stat = "identity") +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1)) +
theme(
legend.position = "none"
)
ggplotly(p)
p <- ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date)),
aes(x = factor(date), y = SI.POV.NAHC, fill = factor(SI.POV.NAHC)), stat = "identity") +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1, color = "GDP Growth Rate"))
ggplotly(p)
p <- ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date)),
aes(x = factor(date), y = SI.POV.NAHC), stat = "identity", fill = factor(SI.POV.NAHC)) +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1, color = "GDP Growth Rate")) +
xlab(NULL) + ylab(NULL) +
labs(title = "%age of people living below poverty line",
caption = "source: World Bank, Global Poverty Working Group.", parse = TRUE) +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A", direction = -1)
p <- ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date), `%age population under poverty` = SI.POV.NAHC),
aes(x = factor(date), y = `%age population under poverty`), stat = "identity", fill = "%age population under poverty") +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1, color = "GDP Growth Rate")) +
xlab(NULL) + ylab(NULL) +
labs(title = "%age of people living below poverty line",
caption = "source: World Bank, Global Poverty Working Group.", parse = TRUE) +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A", direction = -1)
ggplotly(p)
p <- ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date), `%age population under poverty` = SI.POV.NAHC),
aes(x = factor(date), y = `%age population under poverty`), stat = "identity") +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1, color = "GDP Growth Rate")) +
xlab(NULL) + ylab(NULL) +
labs(title = "%age of people living below poverty line",
caption = "source: World Bank, Global Poverty Working Group.", parse = TRUE) +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A", direction = -1)
ggplotly(p)
p <- ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date), `%age population under poverty` = SI.POV.NAHC),
aes(x = year, y = `%age population under poverty`, fill = `%age population under poverty`), stat = "identity") + theme(legend.position = "none") +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1, color = "GDP Growth Rate")) +
xlab(NULL) + ylab(NULL) +
labs(title = "%age of people living below poverty line",
caption = "source: World Bank, Global Poverty Working Group.", parse = TRUE) +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A", direction = -1)
ggplotly(p)
p <- ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date), `%age population under poverty` = SI.POV.NAHC),
aes(x = year, y = `%age population under poverty`, fill = factor(`%age population under poverty`)), stat = "identity") + theme(legend.position = "none") +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1, color = "GDP Growth Rate")) +
xlab(NULL) + ylab(NULL) +
labs(title = "%age of people living below poverty line",
caption = "source: World Bank, Global Poverty Working Group.", parse = TRUE) +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A", direction = -1)
ggplotly(p)
p <- ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date), `%age population under poverty` = factor(SI.POV.NAHC)),
aes(x = year, y = `%age population under poverty`, fill = `%age population under poverty`), stat = "identity") + theme(legend.position = "none") +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1, color = "GDP Growth Rate")) +
xlab(NULL) + ylab(NULL) +
labs(title = "%age of people living below poverty line",
caption = "source: World Bank, Global Poverty Working Group.", parse = TRUE) +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A", direction = -1)
ggplotly(p)
p <- ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date), `%age population under poverty` = SI.POV.NAHC),
aes(x = year, y = `%age population under poverty`, fill = factor(`%age population under poverty`)), stat = "identity") + theme(legend.position = "none") +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1, color = "GDP Growth Rate")) +
xlab(NULL) + ylab(NULL) +
labs(title = "%age of people living below poverty line",
caption = "source: World Bank, Global Poverty Working Group.", parse = TRUE) +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A", direction = -1)
ggplotly(p)
p <- ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date), `%age population under poverty` = SI.POV.NAHC),
aes(x = year, y = `%age population under poverty`, fill = factor(`%age population under poverty`)), stat = "identity") + theme(legend.position = "none") +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1, color = "GDP Growth Rate")) +
xlab(NULL) + ylab(NULL) +
labs(title = "%age of people living below poverty line",
caption = "source: World Bank, Global Poverty Working Group.", parse = TRUE) +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A", direction = -1) + theme(legend.position = "right")
ggplotly(p)
p <- ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date), `%age population under poverty` = SI.POV.NAHC),
aes(x = year, y = `%age population under poverty`, fill = factor(`%age population under poverty`)), stat = "identity") + theme(legend.position = "none") +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1, color = "GDP Growth Rate")) +
xlab(NULL) + ylab(NULL)  +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A", direction = -1) + theme(legend.position = "right") +
+
labs(title = "%age of people living below poverty line",
caption = "source: World Bank, Global Poverty Working Group.", parse = TRUE)
p <- ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date), `%age population under poverty` = SI.POV.NAHC),
aes(x = year, y = `%age population under poverty`, fill = factor(`%age population under poverty`)), stat = "identity") + theme(legend.position = "none") +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1, color = "GDP Growth Rate")) +
xlab(NULL) + ylab(NULL)  +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A", direction = -1) + theme(legend.position = "right") +
labs(title = "%age of people living below poverty line",
caption = "source: World Bank, Global Poverty Working Group.", parse = TRUE)
ggplotly(p)
p <- gdp_data_ven %>%
mutate(year = factor(date)) %>%
ggplot(aes(x = year, y = value, group = 1)) +
geom_line(group = 1) + ylab("GDP per capita growth") +xlab(NULL) + ylab(NULL) +
geom_hline(yintercept = 0, color = "red")
ggplotly(p) +
labs(
title = "GDP per capita growth",
subtitle = "2000 - 2014",
caption = "source: World Bank, Global Poverty Working Group."
)
p <- gdp_data_ven %>%
mutate(year = factor(date)) %>%
ggplot(aes(x = year, y = value, group = 1)) +
geom_line(group = 1) + ylab("GDP per capita growth") +xlab(NULL) + ylab(NULL) +
geom_hline(yintercept = 0, color = "red")
ggplotly(p) +
layout(title = list(text = paste0('GDP per capita growth',
'<br>',
'<sup>',
'2000 - 2014',
'</sup>',
'<sup>',
'source: World Bank, Global Poverty Working Group.',
'</sup>')))
?layout
p <- gdp_data_ven %>%
mutate(year = factor(date)) %>%
ggplot(aes(x = year, y = value, group = 1)) +
geom_line(group = 1) + ylab("GDP per capita growth") +xlab(NULL) + ylab(NULL) +
geom_hline(yintercept = 0, color = "red")
ggplotly(p) +
plotly::layout(title = list(text = paste0('GDP per capita growth',
'<br>',
'<sup>',
'2000 - 2014',
'</sup>',
'<sup>',
'source: World Bank, Global Poverty Working Group.',
'</sup>')))
ggplotly(p) %>%
plotly::layout(title = list(text = paste0('GDP per capita growth',
'<br>',
'<sup>',
'2000 - 2014',
'</sup>',
'<sup>',
'source: World Bank, Global Poverty Working Group.',
'</sup>')))
ggplotly(p) %>%
plotly::layout(title = list(text = paste0('GDP per capita growth',
'<br>',
'<sup>',
'2000 - 2014',
'</sup>',
'<br>'
'<sup>',
ggplotly(p) %>%
plotly::layout(title = list(text = paste0('GDP per capita growth',
'<br>',
'<sup>',
'2000 - 2014',
'</sup>',
'<br>',
'<sup>',
'source: World Bank, Global Poverty Working Group.',
'</sup>')))
ggplotly(p) %>%
plotly::layout(title = list(text = paste0('GDP per capita growth',
'<br>',
'<sup>',
'2000 - 2014; source: World Bank, Global Poverty Working Group.',
'</sup>')))
ggplotly(p) %>%
plotly::layout(title = list(text = paste0('GDP per capita growth (2000-14)',
'<br>',
'<sup>',
'source: World Bank, Global Poverty Working Group.',
'</sup>')))
p <- ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date), `%age population under poverty` = SI.POV.NAHC),
aes(x = year, y = `%age population under poverty`, fill = factor(`%age population under poverty`)), stat = "identity") + theme(legend.position = "none") +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1, color = "GDP Growth Rate")) +
xlab(NULL) + ylab(NULL)  +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A", direction = -1) + theme(legend.position = "right")
ggplotly(p)%>%
plotly::layout(title = list(text = paste0('%age of people living below poverty line & GDP per capita growth (2009-16)',
'<br>',
'<sup>',
'source: World Bank, Global Poverty Working Group.',
'</sup>')))
p <- ggplot2::ggplot() +
ggplot2::geom_bar(data = pov_data_ssu %>%
mutate(year = factor(date), `%age population under poverty` = SI.POV.NAHC),
aes(x = year, y = `%age population under poverty`, fill = factor(`%age population under poverty`)), stat = "identity") +
ggplot2::geom_line(data = gdp_data_ssu %>%
mutate(year = factor(date)), aes(x = year, y = value, group = 1, color = "GDP Growth Rate")) +
xlab(NULL) + ylab(NULL)  +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A", direction = -1) + theme(legend.position = "none")
ggplotly(p)%>%
plotly::layout(title = list(text = paste0('%age of people living below poverty line & GDP per capita growth (2009-16)',
'<br>',
'<sup>',
'source: World Bank, Global Poverty Working Group.',
'</sup>')))
destination_data_ssu %>%
# Removing rows without data
filter(...1 >= 2010) %>%
mutate(year = factor(...1)) %>%
ggplot() +
geom_point(aes(x = year, y = Total, color = "red")) +
geom_line(aes(x = year, y = Total, group = 1, color = "red")) +
ylab(NULL) + xlab(NULL) +
geom_segment(aes(x = 1.2, xend = 1.2, y = 0, yend = 381000), color = "orange", size = 0.2) +
geom_label(aes(x = 1.2, y = 200000, label = "2011:\n South Sudan\nis born", fill = "yellow"), size = 2.5) +
geom_segment(aes(x = 1.6, xend = 1.6, y = 0, yend = 602000), color = "orange", size = 0.2) +
geom_label(aes(x=1.6, y=200000, label="2013:\nCivil War\nerupts", fill = "yellow"),size=2.5) +
geom_segment(aes(x = 2.2, xend = 2.2, y = 0, yend = 855000), color = "orange", size = 0.2) +
geom_label(aes(x=2.2, y=200000, label="2016:\nUN claims ethnic\n cleansing in S. Sudan", fill = "yellow"),size=2.5) +
labs(
title = "Evolution of migration",
subtitle = "2010 - 2019",
caption = "source: World Bank, Global Poverty Working Group."
) +
theme(
legend.position = "none"
) +
scale_color_viridis(discrete=TRUE, guide=FALSE, option="D", direction = 1)
# Importing migrant origin and destination numbers for South Sudan
destination_data <- readxl::read_excel("Data/UN_MigrantStockByOriginAndDestination_2019.xlsx", sheet = 2, skip = 15, col_names = TRUE, trim_ws = TRUE)
# Subsetting origin to South Sudan
destination_data_ssu <- destination_data %>%
dplyr::filter(...3 == "South Sudan")
destination_data_ssu$Total <- destination_data_ssu$Total %>%
as.numeric()
# Subsetting origin to Syria and also 2018. This will be used in the map.
destination_data_ssu_2019 <- destination_data_ssu %>%
dplyr::filter(...1 == 2019)
# I am not interested in the first 9 columns. Only keeping columns which have data about the destination countries
destination_data_ssu_2019 <- destination_data_ssu_2019[c(10:241)]
# Making the table vertical- gather
destination_data_ssu_2019 <- tidyr::gather(destination_data_ssu_2019, key = "country", value = "value")
destination_data_ssu_2019$value <- destination_data_ssu_2019$value %>%
as.numeric()
destination_data_ssu %>%
# Removing rows without data
filter(...1 >= 2010) %>%
mutate(year = factor(...1)) %>%
ggplot() +
geom_point(aes(x = year, y = Total, color = "red")) +
geom_line(aes(x = year, y = Total, group = 1, color = "red")) +
ylab(NULL) + xlab(NULL) +
geom_segment(aes(x = 1.2, xend = 1.2, y = 0, yend = 381000), color = "orange", size = 0.2) +
geom_label(aes(x = 1.2, y = 200000, label = "2011:\n South Sudan\nis born", fill = "yellow"), size = 2.5) +
geom_segment(aes(x = 1.6, xend = 1.6, y = 0, yend = 602000), color = "orange", size = 0.2) +
geom_label(aes(x=1.6, y=200000, label="2013:\nCivil War\nerupts", fill = "yellow"),size=2.5) +
geom_segment(aes(x = 2.2, xend = 2.2, y = 0, yend = 855000), color = "orange", size = 0.2) +
geom_label(aes(x=2.2, y=200000, label="2016:\nUN claims ethnic\n cleansing in S. Sudan", fill = "yellow"),size=2.5) +
labs(
title = "Evolution of migration",
subtitle = "2010 - 2019",
caption = "source: World Bank, Global Poverty Working Group."
) +
theme(
legend.position = "none"
) +
scale_color_viridis(discrete=TRUE, guide=FALSE, option="D", direction = 1)
gdp_data_syr <- wbstats::wb(country = "SYR",
indicator = c("NY.GDP.PCAP.KD.ZG") , startdate = 2000, enddate = 2017)
gdp_data_syr$date <- as.numeric(gdp_data_syr$date)
p <- gdp_data_syr %>%
ggplot(aes(x = factor(date), y = value, group = 1)) +
geom_line(group = 1) + ylab("GDP per capita growth") +xlab(NULL) +
geom_hline(yintercept = 0, color = "red")
ggplotly(p) %>%
plotly::layout(title = list(text = paste0('GDP per capita growth (2000-7)',
'<br>',
'<sup>',
'source: World Bank, Global Poverty Working Group.',
'</sup>')))
p <- gdp_data_syr %>%
mutate(year = factor(date)) %>%
ggplot(aes(x = year, y = value, group = 1)) +
geom_line(group = 1) + ylab("GDP per capita growth") +xlab(NULL) +
geom_hline(yintercept = 0, color = "red")
ggplotly(p) %>%
plotly::layout(title = list(text = paste0('GDP per capita growth (2000-7)',
'<br>',
'<sup>',
'source: World Bank, Global Poverty Working Group.',
'</sup>')))
# Importing migrant origin and destination numbers for Syria
destination_data <- readxl::read_excel("Data/UN_MigrantStockByOriginAndDestination_2019.xlsx", sheet = 2, skip = 15, col_names = TRUE, trim_ws = TRUE)
# Subsetting origin to Syria
destination_data_syr <- destination_data %>%
dplyr::filter(...3 == "Syrian Arab Republic")
destination_data_syr$Total <- destination_data_syr$Total %>%
as.numeric()
# Subsetting origin to Syria and also 2018. This will be used in the map.
destination_data_syr_2019 <- destination_data_syr %>%
dplyr::filter(...1 == 2019)
# I am not interested in the first 9 columns. Only keeping columns which have data about the destination countries
destination_data_syr_2019 <- destination_data_syr_2019[c(10:241)]
# Making the table vertical- gather
destination_data_syr_2019 <- tidyr::gather(destination_data_syr_2019, key = "country", value = "value")
destination_data_syr_2019$value <- destination_data_syr_2019$value %>%
as.numeric()
destination_data_syr %>%
ggplot() +
geom_point(aes(x = factor(...1), y = Total)) +
geom_line(aes(x = factor(...1), y = Total, group = 1)) +
ylab(NULL) + xlab(NULL) +
geom_segment(aes(x = 3, xend = 3, y = 0, yend = 834916), color = "blue", size = 0.2) +
geom_label(aes(x = 3, y = 200000, label = "2000:\n Bashar Assad\ncomes to power"), size = 2.5) +
geom_segment(aes(x = 3.8, xend = 3.8, y = 0, yend = 851000), color = "blue", size = 0.2) +
geom_label(aes(x = 3.8, y = 500000, label = "2004:\n US imposes\nsanctions"), size = 2.5) +
geom_segment(aes(x = 5.2, xend = 5.2, y = 0, yend = 1600000), color = "blue", size = 0.2) +
geom_label(aes(x = 5.2, y = 1000000, label = "2011:\n Arab Spring\nSyrian Civil War begins"), size = 2.5) +
geom_segment(aes(x = 5.5, xend = 5.5, y = 0, yend = 1300000), color = "blue", size = 0.2) +
geom_label(aes(x=5.5, y=500000, label="2012:\nUN declares state of\ncivil war in Syria"),size=2.5) +
geom_segment(aes(x = 6.8, xend = 6.8, y = 0, yend = 867848), color = "blue", size = 0.2) +
geom_label(aes(x=6.8, y=200000, label="2018:\nUS-led missile\nstrikes"),size=2.5)
destination_data_syr %>%
mutate(year = factor(...1)) %>%
ggplot() +
geom_point(aes(x = year, y = Total)) +
geom_line(aes(x = year, y = Total, group = 1)) +
ylab(NULL) + xlab(NULL) +
geom_segment(aes(x = 3, xend = 3, y = 0, yend = 834916), color = "orange", size = 0.2) +
geom_label(aes(x = 3, y = 200000, label = "2000:\n Bashar Assad\ncomes to power", fill = "yellow"), size = 2.5) +
geom_segment(aes(x = 3.8, xend = 3.8, y = 0, yend = 851000), color = "orange", size = 0.2) +
geom_label(aes(x = 3.8, y = 500000, label = "2004:\n US imposes\nsanctions", fill = "yellow"), size = 2.5) +
geom_segment(aes(x = 5.2, xend = 5.2, y = 0, yend = 1600000), color = "orange", size = 0.2) +
geom_label(aes(x = 5.2, y = 1000000, label = "2011:\n Arab Spring\nSyrian Civil War begins", fill = "yellow"), size = 2.5) +
geom_segment(aes(x = 5.5, xend = 5.5, y = 0, yend = 1300000), color = "orange", size = 0.2) +
geom_label(aes(x=5.5, y=500000, label="2012:\nUN declares state of\ncivil war in Syria", fill = "yellow"),size=2.5) +
geom_segment(aes(x = 6.8, xend = 6.8, y = 0, yend = 867848), color = "orange", size = 0.2) +
geom_label(aes(x=6.8, y=200000, label="2018:\nUS-led missile\nstrikes", fill = "yellow"),size=2.5) +
labs(
title = "Evolution of migration",
subtitle = "1990 - 2019",
caption = "source: World Bank, Global Poverty Working Group."
) +
theme(
legend.position = "none"
) +
scale_color_viridis(discrete=TRUE, guide=FALSE, option="D", direction = 1)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
# Load packages.
packages <- c("ggplot2", "tidyverse", "wbstats", "rgdal", "leaflet", "dplyr", "lubridate", "viridis","countrycode","ggthemes","stringi","tm","SnowballC","wordcloud","RColorBrewer","corpus","unikn", "purrr","gower","lme4","multcomp","mvtnorm","corpustools","reshape2", "leaflet.minicharts", "DT", "plotly")
packages <- lapply(packages, FUN = function(x) {
if(!require(x, character.only = TRUE)) {
install.packages(x, repos = "http://cran.us.r-project.org")
library(x, character.only = TRUE)
}
})
# Removing scientific notation
options(scipen = 999)
theme_set(theme_clean())
# SM.POP.NETM - World bank indicator for Net migration- total number of migrants
# SP.POP.TOTL - World bank indicator for Total population- total population
mig_pop <- wbstats::wb(country = "countries_only",indicator = c("SM.POP.NETM", "SP.POP.TOTL"),  startdate = "2007", enddate = "2020", return_wide = TRUE)
# Variable to calcualte migration per population
mig_pop$mig_by_pop <- mig_pop$SM.POP.NETM / mig_pop$SP.POP.TOTL
# Converting date to integer from string
mig_pop$date <- mig_pop$date %>% as.numeric()
myspdf = readOGR(dsn= "data",layer="TM_WORLD_BORDERS_SIMPL-0.3", verbose = FALSE)
df <- wb(country = "countries_only",indicator = c("SM.POP.NETM","SP.POP.TOTL"),
startdate = 2017, enddate = 2017)
df <- df %>%
dplyr::left_join(wbstats::wbcountries() %>%
dplyr::select(iso3c, region)) %>%
tidyr::pivot_wider(
id_cols = c("date","iso3c", "country", "region"),
names_from = indicator,
values_from = value
)
#calculate per 1,000 rate and define categories based on zero threshold
df <- mutate(df,'Per 1,000 Rate' =(df$`Net migration` / df$`Population, total`)*1000)
#round rate to two decimal places
df$`Per 1,000 Rate` <- round(df$`Per 1,000 Rate`, digits = 1)
#categorizes flows of migration
df <- mutate(df,
Type = case_when(
`Per 1,000 Rate` > 0  ~ "Inflow",
`Per 1,000 Rate` < 0  ~ "Outflow",
TRUE                  ~  "Data Not Avalilable"
)
)
format_num = function(n){
case_when(
abs(n) >= 1e12 ~ paste(round(n/1e12), 'Tn'),
abs(n) >= 1e9 ~ paste(round(n/1e9), 'Bn'),
abs(n) >= 1e6 ~ paste(round(n/1e6), 'M'),
abs(n) >= 1e3 ~ paste(round(n/1e3), 'K'),
TRUE ~ as.character(n))
}
df$`Net migration` <- format_num(df$`Net migration`)
df$`Population, total` <- format_num(df$`Population, total`)
#adds merged data into spdf
df$iso3c <- countrycode(df$iso3c, "iso3c", "iso3c", nomatch = NULL)
myspdf$ISO3 <- countrycode(myspdf$ISO3, "iso3c","iso3c", nomatch = NULL)
combined <- myspdf@data %>%
left_join(df, by = c("ISO3" = "iso3c"))
myspdf@data <- combined
#coloring of palattes
combined_outflow <- filter(combined,combined$Type=="Outflow")
qpal_outflow <- colorBin("Reds",combined_outflow$`Per 1,000 Rate`, bins=4,reverse = TRUE)
combined_inflow <- filter(combined,combined$Type=="Inflow")
qpal_inflow <- colorBin("Greens",combined_inflow$`Per 1,000 Rate`,bins = c(2,4,8,16,32,160))
#popup content
content <- paste("<strong>Country:</strong>",myspdf$NAME,"<br/>",
"<strong>Net Migration:</strong>",myspdf$`Net migration`,"<br/>",
"<strong>Population:</strong>",myspdf$`Population, total`,"<br/>",
"<strong>Rate Per 1000:</strong>", myspdf$`Per 1,000 Rate`,"People","<br/>")
leaflet(myspdf,options = leafletOptions(zoomControl = TRUE, minZoom = 0, maxZoom = 4)) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels) %>%
fitBounds(~-100,-50,~80,80) %>%
setView(lat = 10, lng=0, zoom = 1) %>%
#add fill for default
addPolygons(stroke = TRUE, smoothFactor = 0.5,
weight=1, color='#333333', opacity=1, popup = content) %>%
#add fill for outflow
addPolygons(group = "Outflow",stroke = TRUE, smoothFactor = 0.5,
weight=1, color='#333333', opacity=1, popup = content,
fillColor = ~qpal_outflow(`Per 1,000 Rate`)) %>%
#add legend for outflow
addLegend(group = "Outflow",values = combined_outflow$`Per 1,000 Rate`,
pal = qpal_outflow,
title = "Migration Per 1000") %>%
#add fill for inflow
addPolygons(group = "Inflow",stroke = TRUE, smoothFactor = 0.5,
weight=1, color='#333333', opacity=1, popup = content,
fillColor = ~qpal_inflow(`Per 1,000 Rate`)) %>%
#add legend for inflow
addLegend(group = "Inflow",values = combined_inflow$`Per 1,000 Rate`,
pal = qpal_inflow,
title = "Migration Per 1000") %>%
#control layer
addLayersControl(overlayGroups = c("Outflow","Inflow"),  position = "bottomright",
options = layersControlOptions(collapsed = FALSE))
library(tidyverse)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(plotly)
library(DT)
dfperiod_medium = read.csv("Data/WPP2019_Period_Indicators_Medium.csv")
dfm_countries <- dfperiod_medium %>%
filter(MidPeriod >= 2020) %>%
filter(Location %in% c("Syrian Arab Republic", "Venezuela (Bolivarian Republic of)", "South Sudan"))
dfperiod_zm = read.csv("Data/WPP2019_Period_Indicators_OtherVariants.csv")
dfzm_countries <- dfperiod_zm %>%
filter (Variant == "Zero migration") %>%
filter(Location %in% c("Syrian Arab Republic", "Venezuela (Bolivarian Republic of)", "South Sudan"))
plot_birthsmcountries <- ggplot(data=dfm_countries, aes(x=MidPeriod, y=Births, fill=Location, color=Location)) + geom_line()
plot_birthsmcountries
plot_birthszmcountries <- ggplot(data=dfzm_countries, aes(x=MidPeriod, y=Births, fill=Location, color=Location)) + geom_line()
plot_birthszmcountries
plot_deathsmcountries <- ggplot(data=dfm_countries, aes(x=MidPeriod, y=Deaths, fill=Location, color=Location)) + geom_line()
plot_deathsmcountries
plot_deathszmcountries <- ggplot(data=dfzm_countries, aes(x=MidPeriod, y=Deaths, fill=Location, color=Location)) + geom_line()
plot_deathszmcountries
View(net_migration)
